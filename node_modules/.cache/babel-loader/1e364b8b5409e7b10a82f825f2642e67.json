{"ast":null,"code":"import _slicedToArray from \"/home/sayantan/Documents/CODE/React/cov-live/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/sayantan/Documents/CODE/React/cov-live/src/components/Tables&Maps/Regional Table/RegionalComponents/LineG.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactApexChart from 'react-apexcharts';\nimport { GlobalUrl } from '../../../../axios';\n\nconst LineG = ({\n  Country\n}) => {\n  const _useState = useState({\n    active: [],\n    recovered: [],\n    death: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        linedata = _useState2[0],\n        setData = _useState2[1];\n\n  const FetchData = sample => {\n    const cases = Object.values(sample.timeline.cases);\n    const recovered = Object.values(sample.timeline.recovered);\n    const deaths = Object.values(sample.timeline.deaths);\n    const RecovDiff = recovered.map((each, id) => {\n      return recovered[id + 1] - each;\n    }).filter((each, id) => !!each).map(each => Math.abs(each));\n    const DeathsDiff = deaths.map((each, id) => {\n      return deaths[id + 1] - each;\n    }).filter((each, id) => !!each).map(each => Math.abs(each));\n    const active = cases.map((each, id) => each - recovered[id] - deaths[id]);\n    const ActiveDiff = active.map((each, id) => {\n      return active[id + 1] - each;\n    }).filter((each, id) => !!each).map(eaxh => Math.abs(eaxh));\n    setData({\n      recovered: RecovDiff,\n      death: DeathsDiff,\n      active: ActiveDiff\n    });\n  };\n\n  useEffect(() => {\n    GlobalUrl.get(\"/historical/india?lastdays=30\").then(resp => {\n      FetchData(resp.data);\n    }).catch(err => {\n      console.log(err);\n    });\n\n    if (Country) {\n      const newCountry = Country !== null ? Country.toLowerCase() : null;\n      GlobalUrl.get(\"/historical/\".concat(newCountry, \"?lastdays=30\")).then(resp => {\n        FetchData(resp.data);\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, [Country]);\n  const series = [{\n    name: 'Active',\n    data: linedata.active\n  }, {\n    name: 'Recovered',\n    data: linedata.recovered\n  }, {\n    name: 'Deaths',\n    data: linedata.death\n  }];\n  const options = {\n    colors: ['#f46527', '#56CEB1', '#3F6484'],\n    chart: {\n      type: 'line',\n      width: 380,\n      background: '#fff',\n      toolbar: {\n        show: false\n      },\n      xaxis: {\n        labels\n      }\n    },\n    stroke: {\n      width: 5,\n      curve: 'smooth'\n    },\n    grid: {\n      strokeDashArray: 3,\n      padding: {\n        top: 0,\n        left: -35,\n        right: -10\n      },\n      xaxis: {\n        lines: {\n          show: false\n        }\n      },\n      yaxis: {\n        lines: {\n          show: false\n        }\n      }\n    },\n    yaxis: {\n      show: false\n    },\n    xaxis: {\n      show: false,\n      axisBorder: {\n        show: false\n      },\n      axisTicks: {\n        show: false\n      },\n      floating: true\n    },\n    dataLabels: {\n      enabled: false\n    }\n  };\n  return /*#__PURE__*/React.createElement(ReactApexChart, {\n    options: options,\n    series: series,\n    width: \"100%\",\n    height: \"auto\",\n    type: \"line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  });\n};\n\nexport default LineG;","map":{"version":3,"sources":["/home/sayantan/Documents/CODE/React/cov-live/src/components/Tables&Maps/Regional Table/RegionalComponents/LineG.js"],"names":["React","useState","useEffect","ReactApexChart","GlobalUrl","LineG","Country","active","recovered","death","linedata","setData","FetchData","sample","cases","Object","values","timeline","deaths","RecovDiff","map","each","id","filter","Math","abs","DeathsDiff","ActiveDiff","eaxh","get","then","resp","data","catch","err","console","log","newCountry","toLowerCase","series","name","options","colors","chart","type","width","background","toolbar","show","xaxis","labels","stroke","curve","grid","strokeDashArray","padding","top","left","right","lines","yaxis","axisBorder","axisTicks","floating","dataLabels","enabled"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ReactApexChart from 'react-apexcharts'\nimport { GlobalUrl } from '../../../../axios'\n\nconst LineG = ({Country}) => {\n    const [linedata,setData] = useState({\n        active : [],\n        recovered : [],\n        death : []\n    })\n    const FetchData = (sample) =>\n    {\n        const cases = Object.values(sample.timeline.cases)\n        const recovered = Object.values(sample.timeline.recovered)\n        const deaths = Object.values(sample.timeline.deaths) \n       const RecovDiff = recovered.map((each,id) =>\n        {\n            return recovered[id+1] - each\n        }).filter((each,id) => !! each).map(each => Math.abs(each))\n        const DeathsDiff = deaths.map((each,id) =>\n        {\n            return deaths[id+1] - each\n        }).filter((each,id) => !! each).map(each => Math.abs(each))\n        const active = cases.map((each,id) =>\n        (\n            each - recovered[id] - deaths[id]\n        ))\n        const ActiveDiff = active.map((each,id) =>\n        {\n            return active[id+1] - each\n        }).filter((each,id) => !! each).map(eaxh => Math.abs(eaxh))\n        setData({\n            recovered : RecovDiff,\n            death : DeathsDiff,\n            active : ActiveDiff\n        })\n    }\n    useEffect(() =>\n    {\n        GlobalUrl.get(`/historical/india?lastdays=30`)\n        .then(resp =>\n            {  \n               FetchData(resp.data)\n            })\n            .catch(err =>\n            {\n                console.log(err)\n            })\n        if(Country)\n        {\n            const newCountry = Country !== null ? Country.toLowerCase() : null\n            GlobalUrl.get(`/historical/${newCountry}?lastdays=30`)\n            .then(resp =>\n                {\n                    FetchData(resp.data)\n                })\n            .catch(err =>\n                {\n                    console.log(err)\n                })\n        }\n    },[Country])\n    const series = [{\n        name : 'Active',\n        data : linedata.active\n    },\n    {\n        name : 'Recovered',\n        data : linedata.recovered\n    },\n    {\n        name : 'Deaths',\n        data : linedata.death\n    }]\n    const options = {\n        colors: ['#f46527', '#56CEB1', '#3F6484'],\n        chart :{\n            type : 'line',\n            width : 380,\n            background : '#fff',\n            toolbar : {\n                show : false\n            },\n            xaxis :{labels}\n        },\n        stroke : {\n            width : 5,\n            curve : 'smooth',\n        },\n        grid:{\n            strokeDashArray : 3,\n            padding:{top:0,left:-35,right:-10},\n            xaxis:{lines:{show:false}},\n            yaxis:{lines:{show:false}}\n        },\n        yaxis:{\n            show:false\n        },\n        xaxis: {\n        show : false,\n        axisBorder : {show : false},\n        axisTicks :{show : false},\n        floating:true\n        },\n        dataLabels : {\n            enabled : false\n        }\n    }\n    return (\n      <ReactApexChart options={options} series={series}  width=\"100%\" height=\"auto\"type=\"line\"/>\n    )\n}\n\nexport default LineG\n"]},"metadata":{},"sourceType":"module"}