{"ast":null,"code":";\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['chartist'], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('chartist'));\n  } else {\n    root['Chartist.plugins.fillDonut'] = factory(root.Chartist);\n  }\n})(this, function (Chartist) {\n  /**\r\n   * Chartist.js plugin to pre fill donuts with animations\r\n   * author: moxx\r\n   * author-url: https://github.com/moxx/chartist-plugin-fill-donut\r\n   *\r\n   */\n  (function (document, Chartist) {\n    'use strict';\n\n    var defaultOptions = {\n      fillClass: 'ct-fill-donut',\n      label: {\n        html: 'div',\n        class: 'ct-fill-donut-label'\n      },\n      items: [{}]\n    };\n    Chartist.plugins = Chartist.plugins || {};\n\n    Chartist.plugins.fillDonut = function (options) {\n      options = Chartist.extend({}, defaultOptions, options);\n      return function fillDonut(chart) {\n        if (chart instanceof Chartist.Pie) {\n          var $chart = chart.container;\n          $chart.style.position = 'relative';\n          var $svg;\n\n          var drawDonut = function drawDonut(data) {\n            if (data.type === 'slice') {\n              if (data.index === 0) {\n                $svg = $chart.querySelector('svg');\n              }\n\n              var $clone = data.group._node.cloneNode(true);\n\n              options.fillClass.split(\" \").forEach(function (className) {\n                $clone.setAttribute('class', $clone.getAttribute('class') + ' ' + className);\n              });\n              [].forEach.call($clone.querySelectorAll('path'), function (el) {\n                [].forEach.call(el.querySelectorAll('animate'), function (node) {\n                  node.parentNode.removeChild(node);\n                });\n                el.removeAttribute('stroke-dashoffset');\n              });\n              $svg.insertBefore($clone, $svg.childNodes[0]);\n            }\n          };\n\n          chart.on('draw', function (data) {\n            drawDonut(data);\n          });\n          chart.on('created', function (data) {\n            var itemIndex = 0;\n\n            if (chart.options.fillDonutOptions) {\n              options = Chartist.extend({}, options, chart.options.fillDonutOptions);\n              drawDonut(data);\n            }\n\n            [].forEach.call(options.items, function (thisItem) {\n              var $wrapper = document.createElement(options.label.html);\n              options.label.class.split(\" \").forEach(function (className) {\n                if ($wrapper.classList) {\n                  $wrapper.classList.add(className);\n                } else {\n                  $wrapper.className += ' ' + className;\n                }\n              });\n              var item = Chartist.extend({}, {\n                class: '',\n                id: '',\n                content: 'fillText',\n                position: 'center',\n                //bottom, top, left, right\n                offsetY: 0,\n                //top, bottom in px\n                offsetX: 0 //left, right in px\n\n              }, thisItem);\n\n              if (item.id.length > 0) {\n                $wrapper.setAttribute('id', item.id);\n              }\n\n              if (item.class.length > 0) {\n                $wrapper.setAttribute('class', item.class);\n              }\n\n              [].forEach.call($chart.querySelectorAll('*[data-fill-index$=\"fdid-' + itemIndex + '\"]'), function (node) {\n                node.parentNode.removeChild(node);\n              });\n              $wrapper.setAttribute('data-fill-index', 'fdid-' + itemIndex);\n              itemIndex += 1;\n              $wrapper.insertAdjacentHTML('beforeend', item.content);\n              $wrapper.style.position = 'absolute';\n              $chart.appendChild($wrapper);\n              var cWidth = Math.ceil($chart.offsetWidth / 2);\n              var cHeight = Math.ceil($chart.clientHeight / 2);\n              var wWidth = Math.ceil($wrapper.offsetWidth / 2);\n              var wHeight = Math.ceil($wrapper.clientHeight / 2);\n              var style = {\n                bottom: {\n                  bottom: 0 + item.offsetY + \"px\",\n                  left: cWidth - wWidth + item.offsetX + \"px\"\n                },\n                top: {\n                  top: 0 + item.offsetY + \"px\",\n                  left: cWidth - wWidth + item.offsetX + \"px\"\n                },\n                left: {\n                  top: cHeight - wHeight + item.offsetY + \"px\",\n                  left: 0 + item.offsetX + \"px\"\n                },\n                right: {\n                  top: cHeight - wHeight + item.offsetY + \"px\",\n                  right: 0 + item.offsetX + \"px\"\n                },\n                center: {\n                  top: cHeight - wHeight + item.offsetY + \"px\",\n                  left: cWidth - wWidth + item.offsetX + \"px\"\n                }\n              };\n              Chartist.extend($wrapper.style, style[item.position]);\n            });\n          });\n        }\n      };\n    };\n  })(document, Chartist); // jshint ignore:line\n\n\n  return Chartist.plugins.fillDonut;\n});","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":[";(function(root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(['chartist'], factory);\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory(require('chartist'));\r\n  } else {\r\n    root['Chartist.plugins.fillDonut'] = factory(root.Chartist);\r\n  }\r\n}(this, function(Chartist) {\r\n/**\r\n * Chartist.js plugin to pre fill donuts with animations\r\n * author: moxx\r\n * author-url: https://github.com/moxx/chartist-plugin-fill-donut\r\n *\r\n */\r\n(function (document, Chartist) {\r\n    'use strict';\r\n\r\n    var defaultOptions = {\r\n        fillClass: 'ct-fill-donut',\r\n        label: {\r\n            html: 'div',\r\n            class: 'ct-fill-donut-label'\r\n        },\r\n        items: [{}]\r\n    };\r\n\r\n    Chartist.plugins = Chartist.plugins || {};\r\n    Chartist.plugins.fillDonut = function (options) {\r\n        options = Chartist.extend({}, defaultOptions, options);\r\n        return function fillDonut(chart) {\r\n            if (chart instanceof Chartist.Pie) {\r\n                var $chart = chart.container;\r\n                $chart.style.position = 'relative';\r\n                var $svg;\r\n\r\n                var drawDonut = function(data) {\r\n                    if (data.type === 'slice') {\r\n                        if (data.index === 0) {\r\n                            $svg = $chart.querySelector('svg');\r\n                        }\r\n\r\n                        var $clone = data.group._node.cloneNode(true);\r\n                        options.fillClass.split(\" \").forEach(function (className) {\r\n                            $clone.setAttribute('class', $clone.getAttribute('class') + ' ' + className);\r\n                        });\r\n\r\n                        [].forEach.call($clone.querySelectorAll('path'), function (el) {\r\n                            [].forEach.call(el.querySelectorAll('animate'), function (node) {\r\n                                node.parentNode.removeChild(node);\r\n                            });\r\n\r\n                            el.removeAttribute('stroke-dashoffset');\r\n                        });\r\n\r\n                        $svg.insertBefore($clone, $svg.childNodes[0]);\r\n\r\n                    }\r\n                };\r\n\r\n                chart.on('draw', function (data) {\r\n                    drawDonut(data);\r\n                });\r\n\r\n                chart.on('created', function (data) {\r\n                    var itemIndex = 0;\r\n\r\n                    if (chart.options.fillDonutOptions) {\r\n                        options = Chartist.extend({}, options, chart.options.fillDonutOptions);\r\n                        drawDonut(data);\r\n                    }\r\n\r\n                    [].forEach.call(options.items, function (thisItem) {\r\n                        var $wrapper = document.createElement(options.label.html);\r\n                        options.label.class.split(\" \").forEach(function (className) {\r\n                            if ($wrapper.classList) {\r\n                                $wrapper.classList.add(className);\r\n                            } else {\r\n                                $wrapper.className += ' ' + className;\r\n                            }\r\n                        });\r\n                        var item = Chartist.extend({}, {\r\n                            class: '',\r\n                            id: '',\r\n                            content: 'fillText',\r\n                            position: 'center', //bottom, top, left, right\r\n                            offsetY: 0, //top, bottom in px\r\n                            offsetX: 0 //left, right in px\r\n                        }, thisItem);\r\n\r\n\r\n                        if (item.id.length > 0) {\r\n                            $wrapper.setAttribute('id', item.id);\r\n                        }\r\n                        if (item.class.length > 0) {\r\n                            $wrapper.setAttribute('class', item.class);\r\n                        }\r\n\r\n                        [].forEach.call($chart.querySelectorAll('*[data-fill-index$=\"fdid-' + itemIndex + '\"]'), function (node) {\r\n                            node.parentNode.removeChild(node);\r\n                        });\r\n                        $wrapper.setAttribute('data-fill-index', 'fdid-' + itemIndex);\r\n                        itemIndex += 1;\r\n\r\n                        $wrapper.insertAdjacentHTML('beforeend', item.content);\r\n                        $wrapper.style.position = 'absolute';\r\n                        $chart.appendChild($wrapper);\r\n\r\n                        var cWidth = Math.ceil($chart.offsetWidth / 2);\r\n                        var cHeight = Math.ceil($chart.clientHeight / 2);\r\n                        var wWidth = Math.ceil($wrapper.offsetWidth / 2);\r\n                        var wHeight = Math.ceil($wrapper.clientHeight / 2);\r\n\r\n                        var style = {\r\n                            bottom: {\r\n                                bottom: 0 + item.offsetY + \"px\",\r\n                                left: (cWidth - wWidth) + item.offsetX + \"px\"\r\n                            },\r\n                            top: {\r\n                                top: 0 + item.offsetY + \"px\",\r\n                                left: (cWidth - wWidth) + item.offsetX + \"px\"\r\n                            },\r\n                            left: {\r\n                                top: (cHeight - wHeight) + item.offsetY + \"px\",\r\n                                left: 0 + item.offsetX + \"px\"\r\n                            },\r\n                            right: {\r\n                                top: (cHeight - wHeight) + item.offsetY + \"px\",\r\n                                right: 0 + item.offsetX + \"px\"\r\n                            },\r\n                            center: {\r\n                                top: (cHeight - wHeight) + item.offsetY + \"px\",\r\n                                left: (cWidth - wWidth) + item.offsetX + \"px\"\r\n                            }\r\n                        };\r\n\r\n                        Chartist.extend($wrapper.style, style[item.position]);\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    };\r\n}(document, Chartist)); // jshint ignore:line\r\n\r\nreturn Chartist.plugins.fillDonut;\r\n}));\r\n\r\n//# sourceMappingURL=chartist-plugin-fill-donut.js.map\r\n"]},"metadata":{},"sourceType":"script"}