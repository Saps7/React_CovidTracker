{"ast":null,"code":"import _slicedToArray from \"/home/sayantan/Documents/CODE/React/cov-live/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/sayantan/Documents/CODE/React/cov-live/src/components/Tables&Maps/Regional Table/Regional Tab/RegionalTab.js\";\nimport React, { useState, useEffect } from 'react';\nimport { MDBDataTable } from 'mdbreact';\nimport { covidURL } from '../../../../axios';\n\nconst RegionalTab = ({\n  Country\n}) => {\n  const date = \"\".concat(new Date().getFullYear(), \"-\").concat(\"0\" + (new Date().getMonth() + 1), \"-\").concat(new Date().getUTCDate());\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        RegionalInfo = _useState2[0],\n        setInfo = _useState2[1];\n\n  useEffect(() => {\n    covidURL.get(\"/\".concat(date, \"/country/india\")).then(resp => {\n      setInfo(resp.data.dates[\"\".concat(date)].countries.India.regions);\n    }).catch(err => {\n      console.log(err);\n    });\n\n    if (Country) {\n      covidURL.get(\"/\".concat(date, \"/country/\").concat(Country)).then(resp => {\n        setInfo(resp.data.dates[\"\".concat(date)].countries[\"\".concat(Country)].regions);\n      }).catch(resp => {\n        setInfo(resp.data.dates[\"\".concat(date)].countries.India.regions);\n      });\n    }\n  });\n  const data = {\n    columns: [{\n      label: 'Province',\n      field: 'prov',\n      sort: 'asc',\n      width: 150\n    }, {\n      label: 'Total',\n      field: 'total',\n      sort: 'asc',\n      width: 270\n    }, {\n      label: 'Active',\n      field: 'active',\n      sort: 'asc',\n      width: 200\n    }, {\n      label: 'Recovered',\n      field: 'recov',\n      sort: 'asc',\n      width: 200\n    }, {\n      label: 'Deaths',\n      field: 'death',\n      sort: 'asc',\n      width: 100\n    }],\n    rows: RegionalInfo.map(each => {\n      return {\n        prov: \"\".concat(each.name),\n        total: \"\".concat(each.today_confirmed),\n        active: \"\".concat(each.today_new_open_cases),\n        recov: \"{}\"\n      };\n    })\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MDBDataTable, {\n    borderless: true,\n    small: true,\n    maxHeight: \"300px\",\n    entries: 5,\n    displayEntries: false,\n    materialSearch: true,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default RegionalTab;","map":{"version":3,"sources":["/home/sayantan/Documents/CODE/React/cov-live/src/components/Tables&Maps/Regional Table/Regional Tab/RegionalTab.js"],"names":["React","useState","useEffect","MDBDataTable","covidURL","RegionalTab","Country","date","Date","getFullYear","getMonth","getUTCDate","RegionalInfo","setInfo","get","then","resp","data","dates","countries","India","regions","catch","err","console","log","columns","label","field","sort","width","rows","map","each","prov","name","total","today_confirmed","active","today_new_open_cases","recov"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { MDBDataTable } from 'mdbreact';\nimport { covidURL } from '../../../../axios';\n\nconst RegionalTab = ({Country}) => {\n    const date =`${new Date().getFullYear()}-${\"0\" + (new Date().getMonth() + 1)}-${new Date().getUTCDate()}`\n    const [RegionalInfo,setInfo] = useState([])\n    useEffect(() =>\n    {\n        covidURL.get(`/${date}/country/india`)\n        .then(resp =>\n            {\n                setInfo(resp.data.dates[`${date}`].countries.India.regions)\n            })\n        .catch(err =>\n            {\n                console.log(err)\n            })\n        if(Country)\n        {\n            covidURL.get(`/${date}/country/${Country}`)\n            .then(resp =>\n                {\n                    setInfo(resp.data.dates[`${date}`].countries[`${Country}`].regions)\n                })\n            .catch(resp =>\n                {\n                    setInfo(resp.data.dates[`${date}`].countries.India.regions)\n                })\n        }\n    })\n    const data = {\n        columns: [\n          {\n            label: 'Province',\n            field: 'prov',\n            sort: 'asc',\n            width: 150\n          },\n          {\n            label: 'Total',\n            field: 'total',\n            sort: 'asc',\n            width: 270\n          },\n          {\n            label: 'Active',\n            field: 'active',\n            sort: 'asc',\n            width: 200\n          },\n          {\n            label: 'Recovered',\n            field: 'recov',\n            sort: 'asc',\n            width: 200\n          },\n          {\n            label: 'Deaths',\n            field: 'death',\n            sort: 'asc',\n            width: 100\n          },\n        ],\n        rows: RegionalInfo.map(each =>\n            {\n                return{\n                    prov : `${each.name}`,\n                    total : `${each.today_confirmed}`,\n                    active : `${each.today_new_open_cases}`,\n                    recov : `{}`\n                }\n            })\n      };\n    return (\n        <div>\n            <MDBDataTable \n             borderless\n             small\n             maxHeight=\"300px\"\n             entries={5}\n             displayEntries={false}\n             materialSearch={true}\n             data={data}/>\n        </div>\n    )\n}\n\nexport default RegionalTab\n"]},"metadata":{},"sourceType":"module"}